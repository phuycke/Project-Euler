#!/usr/bin/env python3

# Problem setting
"""
Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and
D = |Pk − Pj| is minimised;

what is the value of D?
"""

def pentagonal(steps):

    calculated = []

    for n in range(1, steps+1):
        calculated.append(n * (3*n - 1) // 2)

    return calculated


def binarySearch(alist, item):
    first = 0
    last = len(alist)-1
    found = False

    while first <= last and not found:
        midpoint = (first + last)//2
        if alist[midpoint] == item:
            found = True
        else:
            if item < alist[midpoint]:
                last = midpoint-1
            else:
                first = midpoint+1

    return found


brute = pentagonal(100000)

start = 0
first = 1
second = 5

while start < len(brute):
    sum = brute[start]
    notfound = 1
    for j in range(start + 1, len(brute)):
        needed_one = brute[start] + brute[j]
        needed_two = brute[j] - brute[start]
        if binarySearch(brute, needed_one) and binarySearch(brute, needed_two):
            first = brute[start]
            second = brute[j]
            notfound = 0
            break
    if notfound == 0:
        break
    else:
        start += 1

result = [first, second]
print("The difference between the second and the first term is:", result[1] - result[0])
