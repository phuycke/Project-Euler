#!/usr/bin/env python3

# Problem setting
"""
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.

The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:
     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
"""

def isPrime(integer):
    """Returns True when a number is a prime, returns False otherwise."""

    is_prime = True
    start = 2
    if integer == 2:
        return True
    else:
        while is_prime and start < integer:
            if integer % start == 0:
                is_prime = False
            else:
                if start % 2 == 0:
                    start += 1
                else:
                    start += 2
    return is_prime

def primeFactorize(number):
    """Factorizes a number into primes."""

    divisor = 2
    divisorList = []
    while number >= 2:
        if number % divisor == 0:
            divisorList.append(divisor)
            number = number // divisor
        elif isPrime(number):
            divisorList.append(number)
            break
        else:
            divisor += 1

    return divisorList

def numOfDivisors(primelist):
    """Find the number of divisors of a number after first factorizing that number into primes."""

    occurences = set(primelist)
    counts = []
    [counts.append(primelist.count(element)) for element in occurences]

    solution = 1
    i = 0
    while i < len(counts):
        solution = solution * (counts[i] + 1)
        i += 1

    return solution


def triangleNumber(limit):
    """Finds a triangle number which has at least n divisors."""

    satisfied = False
    i = 0
    while not satisfied:
        triangle = int((i*(i+1)/2))
        inBetween = primeFactorize(triangle)
        needed = numOfDivisors(inBetween)
        if needed > 250:
            print(needed)
        if needed > limit:
            satisfied = True
        else:
            i += 1

    return triangle

solution = triangleNumber(500)
print("The triangle number we seeks is: %d" %(solution))